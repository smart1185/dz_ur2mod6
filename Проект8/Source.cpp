#include <stdio.h>
#include <iostream>
#include <locale.h>
#include <time.h>

using namespace std;
int IsPowerN(int *k, int *n);
int IsPrime(int *n);
int DigitN(int *k, int *n);
float DegToRad(float *d);
float RadToDeg(float *r);
double Fact(int *n);

int main()
{
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	int  N;
	do
	{
		cout << "\t\t----Введите номер задания: ";
		cin >> N;
		cout << endl;
		switch (N)
		{
		case 1:
			/*1.Описать функцию IsPowerN(K, N) логического типа, возвращающую True, если целый параметр K (> 0) является
			степенью числа N (> 1), и False в противном случае. Дано число N (> 1) и набор из 10 целых положительных чисел.
			С помощью функции IsPowerN найти количество степеней числа N в данном наборе.*/
		{
			int n, k, cnt = 0;
			cout << "Введите N:" << endl;
			cin >> n;
			cout << endl;
			cout << "Введите числа:" << endl;
			for (int i = 0; i < 10; i++)
			{
				cin >> k;
				if (IsPowerN(&k, &n))
				{
					cnt++;
				}
			}
			cout << endl;
			cout << "Количество степеней числа '" << n << "' - " << cnt << endl;
		}
		break;

		case 2:
			/*2.Описать функцию IsPrime(N) логического типа, возвращающую True, если целый параметр N (> 1) является
			простым числом, и False в противном случае (число, большее 1, называется простым, если оно не имеет
			положительных делителей, кроме 1 и самого себя). Дан набор из 10 целых чисел, больших 1. С помощью функции
			IsPrime найти количество простых чисел в данном наборе.*/
		{
			int cnt = 0, n;
			cout << "Набор из 10 целых чисел: " << endl;
			for (int i = 0; i < 10; i++)
			{
				n = rand() % 99;
				cout << n << endl;
				if (IsPrime(&n) == 1)
				{
					cnt++;
				}
			}
			cout << endl;
			cout << "Количество простых чисел в данном наборе = " << cnt << endl;
		}
		cout << endl;
		break;

		case 3:
			/*3.Описать функцию DigitN(K, N) целого типа, возвращающую N-ю цифру целого положительного числа K
			(цифры в числе нумеруются справа на- лево). Если количество цифр в числе K меньше N, то функция возвращает –1.
			Для каждого из пяти данных целых положительных чисел K1, K2, …, K5 вызвать функцию DigitN с параметром N,
			изменяющимся от 1 до 5.*/
		{
			int k, n;
			cout << "Введите N-ю цифру: ";
			cin >> n;

			for (int i = 0; i < 5; i++)
			{
				cout << "K" << i + 1 << " = ";
				cin >> k;
				cout << "N= " << DigitN(&k, &n)<< endl;
			}
		}
		cout << endl;
		break;

		case 4:
			/*4.Описать функцию DegToRad(D) вещественного типа, находящую величину угла в радианах, если дана его величина D в
			градусах (D — вещественное число, 0 < D < 360). Воспользоваться следующим соотношением: 180° = π радианов. В качестве
			значения π использовать 3.14. С помощью функции DegToRad перевести из градусов в радианы пять данных углов.*/
		{
			float d = 0;
			cout << "Градусы----радианы:" << endl;
			for (int i = 0; i < 5; i++)
			{
				d = rand() % 360;
				cout << d << "°   =   ";
				cout << DegToRad(&d) << " rad" << endl;
			}
		}
		cout << endl;
		break;

		case 5:
			/*5.Описать функцию RadToDeg(R) вещественного типа, находящую вели- чину угла в градусах, если дана его
			величина R в радианах (R — вещественное число, 0 < R < 2·π). Воспользоваться следующим соотношением:
			180° = π радианов. В качестве значения π использовать 3.14. С помощью функции RadToDeg перевести из радианов
			в градусы пять данных углов*/
		{
			float r = 0;
			cout << "Радианы----градусы:" << endl;
			for (int i = 0; i < 5; i++)
			{
				r = 1 + rand() % 6;
				cout << r << " rad  =   ";
				cout << RadToDeg(&r) << "°" << endl;
			}
		}
		cout << endl;
		break;

		case 6:
			/*6.Описать функцию Fact(N) вещественного типа, вычисляющую значение факториала N! = 1·2·…·N
			(N > 0 — параметр целого типа; вещественное возвращаемое значение используется для того, чтобы избежать
			целочисленного переполнения при больших значениях N). С помощью этой функции найти факториалы пяти данных
			целых чисел.*/
		{
			int n;
			for (int i = 0; i < 5; i++)
			{
				n = rand() % 10;
				cout << n << "! = " << Fact(&n) << endl;
			}
		}
		cout << endl;
		break;
		default: {cout << "Задания с таким номером не существует" << endl; }
		}
	} while (N > 0 && N < 11);
	cout << "\t\t\t\t\tКОНЕЦ." << endl;
	system("pause");
}

/*1.Описать функцию IsPowerN(K, N) логического типа, возвращающую True, если целый параметр K (> 0) является степенью
числа N (> 1), и False в противном случае. Дано число N (> 1) и набор из 10 целых положительных чисел. С помощью функции
IsPowerN найти количество степеней числа N в данном наборе.*/
int IsPowerN(int *k, int *n)
{
	while (*k%*n == 0)
	{
		*k = *k / (*n);
	}
	return *k == 1;
}

/*2.Описать функцию IsPrime(N) логического типа, возвращающую True, если целый параметр N (> 1) является
простым числом, и False в противном случае (число, большее 1, называется простым, если оно не имеет
положительных делителей, кроме 1 и самого себя). Дан набор из 10 целых чисел, больших 1. С помощью функции
IsPrime найти количество простых чисел в данном наборе.*/
int IsPrime(int *n)
{
	for (int i = 2; i < *n / 2; i++)
	{
		if (*n%i == 0)
			return 0;
	}
	return 1;
}

/*3.Описать функцию DigitN(K, N) целого типа, возвращающую N-ю цифру целого положительного числа K
(цифры в числе нумеруются справа налево). Если количество цифр в числе K меньше N, то функция возвращает –1.
Для каждого из пяти данных целых положительных чисел K1, K2, …, K5 вызвать функцию DigitN с параметром N,
изменяющимся от 1 до 5.*/

int DigitN(int *k, int *n)
{
	int cnt = 0;
	while (*k != 0)
	{
		cnt++;
		if (cnt == *n)
			return *k % 10;
		*k /= 10;
	}
	return -1;
}

/*4.Описать функцию DegToRad(D) вещественного типа, находящую величину угла в радианах, если дана его величина D в
градусах (D — вещественное число, 0 < D < 360). Воспользоваться следующим соотношением: 180° = π радианов. В качестве
значения π использовать 3.14. С помощью функции DegToRad перевести из градусов в радианы пять данных углов.*/
float DegToRad(float *d)
{
	return *d * 3.14 / 180;
}

/*5.Описать функцию RadToDeg(R) вещественного типа, находящую вели- чину угла в градусах, если дана его
величина R в радианах (R — вещественное число, 0 < R < 2·π). Воспользоваться следующим соотношением:
180° = π радианов. В качестве значения π использовать 3.14. С помощью функции RadToDeg перевести из радианов
в градусы пять данных углов*/
float RadToDeg(float *r)
{
	return 180 * (*r) / 3.14;
}

/*6.Описать функцию Fact(N) вещественного типа, вычисляющую значение факториала N! = 1·2·…·N
(N > 0 — параметр целого типа; вещественное возвращаемое значение используется для того, чтобы избежать
целочисленного переполнения при больших значениях N). С помощью этой функции найти факториалы пяти данных целых чисел.*/
double Fact(int *n)
{
	int fact = 1;
	for (int i = 1; i <= *n; i++)
	{
		fact *= i;
	}
	return fact;

}